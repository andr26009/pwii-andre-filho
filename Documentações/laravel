## ðŸ“Œ 1. O que Ã© Laravel?

O **Laravel** Ã© um framework PHP moderno e robusto para desenvolvimento de aplicaÃ§Ãµes web. Ele segue o padrÃ£o **MVC** (Model-View-Controller) e traz recursos como:

-   Roteamento simples e flexÃ­vel.
    
-   ORM Eloquent para manipulaÃ§Ã£o de banco de dados.
    
-   Sistema de migraÃ§Ãµes.
    
-   AutenticaÃ§Ã£o pronta.
    
-   Templates Blade.
    
-   IntegraÃ§Ã£o com filas, jobs, notificaÃ§Ãµes, e-mails, API REST, entre outros.
    

Seu objetivo Ã© **facilitar o desenvolvimento** e aumentar a produtividade.

----------

## ðŸ“Œ 2. Estrutura MVC no Laravel

-   **Model (M)** â†’ Representa e gerencia os dados (Eloquent ORM).
    
-   **View (V)** â†’ ResponsÃ¡vel pela interface com o usuÃ¡rio (Blade).
    
-   **Controller (C)** â†’ Recebe as requisiÃ§Ãµes, processa a lÃ³gica e envia a resposta.
    

Fluxo bÃ¡sico:

1.  O usuÃ¡rio acessa uma rota.
    
2.  A rota chama um **Controller**.
    
3.  O Controller manipula um **Model**.
    
4.  O Controller retorna uma **View** para o usuÃ¡rio.
    

----------

## ðŸ“Œ 3. Instalando o Laravel

### PrÃ©-requisitos

-   PHP (>= 8.x)
    
-   Composer
    
-   MySQL/PostgreSQL (ou outro banco)
    
-   ExtensÃµes PHP necessÃ¡rias (`mbstring`, `openssl`, `pdo`, etc.)
- ### InstalaÃ§Ã£o via Composer

bash

CopiarEditar

`composer create-project laravel/laravel nome-do-projeto` 

Ou, se tiver o instalador do Laravel:

bash

CopiarEditar

`laravel new nome-do-projeto`
## ðŸ“Œ 4. Estrutura de Pastas

-   `app/` â†’ LÃ³gica da aplicaÃ§Ã£o (Models, Controllers, etc.)
    
-   `routes/` â†’ Arquivos de rotas (`web.php`, `api.php`).
    
-   `resources/views/` â†’ Templates Blade.
    
-   `database/migrations/` â†’ MigraÃ§Ãµes do banco de dados.
    
-   `public/` â†’ Arquivos pÃºblicos (CSS, JS, imagens).
## ðŸ“Œ 5. Criando Rotas

Arquivo: `routes/web.php`

php

CopiarEditar

`use  Illuminate\Support\Facades\Route; Route::get('/', function () { return  view('welcome');
}); Route::get('/sobre', function () { return  "PÃ¡gina Sobre";
});` 

----------

## ðŸ“Œ 6. Criando Controllers

bash

CopiarEditar

`php artisan make:controller MeuController` 

Exemplo:

php

CopiarEditar

`namespace  App\Http\Controllers; use  Illuminate\Http\Request; class  MeuController  extends  Controller { public  function  index() { return  view('home');
    }
}` 

Rota apontando para o Controller:

php

CopiarEditar

`Route::get('/home', [MeuController::class, 'index']);` 

----------

## ðŸ“Œ 7. Trabalhando com Models e Banco de Dados

Criando um Model com migraÃ§Ã£o:

bash

CopiarEditar

`php artisan make:model Produto -m` 

Arquivo de migraÃ§Ã£o (`database/migrations/...`):

php

CopiarEditar

`public  function  up()
{ Schema::create('produtos', function (Blueprint $table) { $table->id(); $table->string('nome'); $table->decimal('preco', 8, 2); $table->timestamps();
    });
}` 

Rodar a migraÃ§Ã£o:

bash

CopiarEditar

`php artisan migrate` 

----------

## ðŸ“Œ 8. Views com Blade

Exemplo de View (`resources/views/home.blade.php`):

blade

CopiarEditar

`<!DOCTYPE html>
<html>
<head>
    <title>Minha PÃ¡gina</title>
</head>
<body>
    <h1>OlÃ¡, {{ $nome }}</h1>
</body>
</html>` 

Passando dados do Controller:

php

CopiarEditar

`return  view('home', ['nome' => 'AndrÃ©']);` 

----------

## ðŸ“Œ 9. Artisan â€” O CLI do Laravel

Comandos Ãºteis:

bash

CopiarEditar

`php artisan serve # Inicia o servidor local php artisan migrate # Executa migraÃ§Ãµes php artisan make:model # Cria Model php artisan make:controller # Cria Controller php artisan route:list # Lista rotas` 

----------

## ðŸ“Œ 10. Recursos AvanÃ§ados

-   **AutenticaÃ§Ã£o**:
    
    bash
    
    CopiarEditar
    
    `composer require laravel/ui
    php artisan ui vue --auth` 
    
-   **API REST**:  
    Rotas no `routes/api.php` usando `Route::apiResource()`.
    
-   **Filas e Jobs**:  
    `php artisan make:job NomeJob`
    
-   **NotificaÃ§Ãµes e E-mails**:  
    `php artisan make:notification NomeNotificacao`
    

----------

## ðŸ“Œ 11. Boas PrÃ¡ticas

-   Usar **Eloquent** para consultas.
    
-   Manter a lÃ³gica no **Controller** ou **Services**, nÃ£o na View.
    
-   Usar **Requests** para validar formulÃ¡rios.
    
-   Organizar rotas com **Route Groups**.
    
-   Usar **.env** para dados sensÃ­veis.
    

----------

## ðŸ“Œ 12. PrÃ³ximos Passos

-   Estudar **Middleware**.
    
-   Aprender **Policies e Gates** (controle de acesso).
    
-   Criar **APIs REST** completas.
    
-   Implementar **Testes Automatizados** (`php artisan test`).